function Taboo(tableName){this._data=[];_.mixin({zipArrays:function(arrays){return _.zip.apply(_,arrays)}});this.metadata={tableName:tableName};this._callbacks={};this.addRows=function(rows,options){var defaultOptions={silent:false};if(_.isObject(options)){options=_.extend(defaultOptions,options)}else{options=defaultOptions}var _this=this;rows.forEach(function(row,index){var currentHeaders=_this.getColumnHeaders();if(_.isArray(row)){row.forEach(function(cell,i){if(i<currentHeaders.length){_this._addCell(currentHeaders[i],cell)}else{}});_this._clean()}else if(_.isObject(row)){var rowHeaders=_.keys(row);_this._addHeaders(rowHeaders);_.pairs(row).forEach(function(pair,index){_this._addCell(pair[0],pair[1])});_this._clean()}});if(!options.silent){this.triggerCallbacks("update")}};this.addColumns=function(colNamesArray,options){var defaultOptions={silent:false};if(_.isObject(options)){options=_.extend(defaultOptions,options)}else{options=defaultOptions}var _this=this;colNamesArray.forEach(function(name){_this.addColumn(name,options)});if(!options.silent){this.triggerCallbacks("update")}};this.updateWhere=function(update,whereList,options){var defaultOptions={silent:false};if(_.isObject(options)){options=_.extend(defaultOptions,options)}else{options=defaultOptions}var _this=this,updateHeader=_.keys(update)[0],updateValue=_.values(update)[0],column=_.find(this._data,function(column){return column.header===updateHeader});if(_.isUndefined(column)){return}_.chain(this._getRowsAsCellObjects()).map(function(row,index){var rowUpdate=_.every(_.map(whereList,function(where){return!_.isEmpty(_.where(row,{header:_.keys(where)[0],data:_.values(where)[0]}))}));if(rowUpdate){return index}else{return undefined}}).filter(function(rowIndex){return!_.isUndefined(rowIndex)}).each(function(rowIndex){column.data[rowIndex]=updateValue}).value();if(!options.silent){this.triggerCallbacks("update")}};this.addColumn=function(colName,options){var defaultOptions={silent:false};if(_.isObject(options)){options=_.extend(defaultOptions,options)}else{options=defaultOptions}var column=_.find(this._data,function(column){return column.header===colName});if(typeof column==="undefined"){column={header:colName,data:[]};this._data.push(column)}if(!options.silent){this.triggerCallbacks("update")}};this.clear=function(options){var defaultOptions={silent:false};if(_.isObject(options)){options=_.extend(defaultOptions,options)}else{options=defaultOptions}this._data=[];if(!options.silent){this.triggerCallbacks("update")}};this.getColumnHeaders=function(){return _.map(this._data,function(column){return column.header})};this.getColumn=function(colName){var col;this._data.forEach(function(columnObject,index){if(columnObject.header==colName){col=columnObject.data}});return col};this.getRowAtIndex=function(index){return _.map(this._data,function(column,i){return{header:column["header"],data:column["data"][index]}})};this.getRows=function(options){options=options||{};options["objects"]=true;if(options.array){return _.chain(this._data).map(function(column){return column.data}).zipArrays().value()}else if(options.objects){return _.chain(this._getRowsAsCellObjects()).map(function(row,index){return _.reduce(row,function(rowObject,cell){var temp={};temp[cell.header]=cell.data;return _.extend(rowObject,temp)},{})}).value()}};this.getRowsWhere=function(whereParams,opts){var options=opts||{};options["objects"]=_.isUndefined(options["objects"])?true:options["objects"];var wherePairs=_.pairs(whereParams);return _.chain(this._getRowsAsCellObjects()).filter(function(row){return _.every(_.map(wherePairs,function(whereItem){return!_.isEmpty(_.where(row,{header:whereItem[0],data:whereItem[1]}))}))}).map(function(row,index){if(!options.objects){return _.map(row,function(cell){return cell.data})}else{return _.reduce(row,function(rowObject,cell){var temp={};temp[cell.header]=cell.data;return _.extend(rowObject,temp)},{})}}).value()};this.deleteWhere=function(whereParams){var options=options||{},_this=this;return _.chain(this._getRowsAsCellObjects()).map(function(row,index){var whereTrue=_.every(_.map(_.pairs(whereParams),function(whereItem){return!_.isEmpty(_.where(row,{header:whereItem[0],data:whereItem[1]}))}));if(whereTrue){return index}else{return undefined}}).filter(function(rowIndex){return!_.isUndefined(rowIndex)}).sort().reverse().each(function(deleteIndex){_.each(_this._data,function(column,colIndex){column.data.splice(deleteIndex,1)})}).reduce(function(acc,n){return acc+1},0).value()};this.columnToObjects=function(colName){var col=_.unique(this.getColumn(colName)),colObjects=_.map(col,function(cell,index){return{name:cell,related:{},_index:index}}),rows=this._getRowsAsCellObjects();colObjects.forEach(function(columnObj,index){rows.forEach(function(row,index){var joinCell=_.find(row,function(cell){return columnObj.name===cell.data});if(typeof joinCell!=="undefined"){var remainingCells=_.reject(row,function(cell){return cell==joinCell});remainingCells.forEach(function(rc){if(typeof columnObj.related[rc.header]==="undefined"){columnObj.related[rc.header]=[]}columnObj.related[rc.header].push(rc.data)})}else{}})});return colObjects};this.print=function(printColumnSize){var printColumnSize=printColumnSize|15;var printString="\n";var columnLengths=[];if(this._data.length===0){return""}this._data.forEach(function(column){columnLengths.push(Math.max(column.header.length,printColumnSize));printString+=column.header+new Array(Math.max(column.header.length,printColumnSize)-(column.header.length-1)).join(" ")+" | "});printString+="\n";this._getRowsAsCellObjects().forEach(function(row,rowIndex,array){_.each(row,function(cell,cellIndex){var cellStr=String(cell.data),cellRepr;if(cellStr.length>columnLengths[cellIndex]){cellRepr=cellStr.slice(0,columnLengths[cellIndex]-3);cellRepr=cellRepr+"..."}else if(cellStr.length<columnLengths[cellIndex]){var padding=new Array(columnLengths[cellIndex]-(cellStr.length-1)).join(" ");cellRepr=cellStr+padding}printString+=cellRepr+" | "});printString+="\n"});printString+="\n";return printString};this.leftJoin=function(leftKey,rightTable,rightKey){var left=this,leftHeaders=left.getColumnHeaders(),right=rightTable,joinResult=new Taboo,keyMatchFound,incrementRegex=/(.*-)(\d)/gm;left._getRowsAsCellObjects().forEach(function(leftRow,index){keyMatchFound=false;var leftKeyValue=_.find(leftRow,function(cell){return cell.header===leftKey});right._getRowsAsCellObjects().forEach(function(rightRow,index,array){var rightKeyValue=_.find(rightRow,function(cell){return cell.header===rightKey});if(_.isEqual(rightKeyValue,leftKeyValue)){var modifiedRightRow=_.reject(rightRow,function(v){return _.isEqual(v,leftKeyValue)});modifiedRightRow=_.map(modifiedRightRow,function(v){if(leftHeaders.indexOf(v.header)>=0){var matches=incrementRegex.exec(v.header);if(matches&&matches.length===3){v.header=matches[1]+matches[2]+1}else{v.header=v.header+"-1"}return v}else{return v}});joinResult._addRowCellObjects(leftRow.concat(modifiedRightRow));keyMatchFound=true}if(index===array.length-1&&keyMatchFound==false){joinResult._addRowCellObjects(leftRow)}})});return joinResult};this.innerJoin=function(leftKey,rightTable,rightKey){var left=this,leftHeaders=left.getColumnHeaders(),right=rightTable,joinResult=new Taboo,keyMatchFound,incrementRegex=/(.*-)(\d)/gm;left._getRowsAsCellObjects().forEach(function(leftRow,index){keyMatchFound=false;var leftKeyValue=_.find(leftRow,function(cell){return cell.header===leftKey});right._getRowsAsCellObjects().forEach(function(rightRow,index,array){var rightKeyValue=_.find(rightRow,function(cell){return cell.header===rightKey});if(_.isEqual(rightKeyValue,leftKeyValue)){var modifiedRightRow=_.reject(rightRow,function(v){return _.isEqual(v,leftKeyValue)});modifiedRightRow=_.map(modifiedRightRow,function(v){if(leftHeaders.indexOf(v.header)>=0){var matches=incrementRegex.exec(v.header);if(matches&&matches.length===3){v.header=matches[1]+matches[2]+1}else{v.header=v.header+"-1"}return v}else{return v}});joinResult._addRowCellObjects(leftRow.concat(modifiedRightRow));keyMatchFound=true}})});return joinResult};this.clone=function(){var data=JSON.parse(JSON.stringify(this._data)),t=new Taboo;t._data=data;return t};this.registerCallback=function(eventName,callback){if(_.isArray(this._callbacks[eventName])){this._callbacks[eventName].push(callback)}else{this._callbacks[eventName]=[callback]}};this.triggerCallbacks=function(eventName,details){var _this=this;if(_.isArray(this._callbacks[eventName])){this._callbacks[eventName].forEach(function(callback){callback(_this,details)})}};this._clean=function(){var maxColumnLength=_.reduce(this._data,function(memo,value,index){var colLength=value["data"].length;if(colLength>memo){return colLength}else{return memo}},0);this._data.forEach(function(column,index){for(var i=column.data.length;i<maxColumnLength;i++){column.data.push(undefined)}})};this._getRowsAsCellObjects=function(){return _.chain(this._data).map(function(column){return _.map(column.data,function(cell){return{header:column["header"],data:cell}})}).zipArrays().value()};this._addRowCellObjects=function(row){var _this=this;var headers=_.pluck(row,"header");this._addHeaders(headers);row.forEach(function(cell){_this._addCell(cell["header"],cell["data"])});this._clean()};this._addHeaders=function(headers){var _this=this,currentHeaders=this.getColumnHeaders(),uniqueHeaders=_.unique(headers);if(uniqueHeaders.length!==headers.length){throw"Can't add a row with duplicate headers"}var newHeaders=_.difference(headers,currentHeaders);newHeaders.forEach(function(header,index){_this._data.push({header:header,data:[]})});this._clean()};this._addCell=function(colName,cellValue){var column=_.find(this._data,function(column){return column.header===colName});column["data"].push(cellValue)}}